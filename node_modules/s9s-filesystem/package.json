{
  "name": "s9s-filesystem",
  "version": "1.0.5",
  "description": "File system module",
  "main": "filesystem.js",
  "author": {
    "name": "Severalnines AB"
  },
  "license": "MIT",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "severalnines",
    "s9s",
    "fs",
    "filesystem",
    "file",
    "fdir"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/simon-s9/s9s-filesystem.git"
  },
  "dependencies": {
    "mkdirp": "^0.5.1"
  },
  "devDependencies": {
    "mocha": "^2.4.5"
  },
  "readme": "# s9s-filesystem\n[![Build Status](https://travis-ci.org/simon-s9/s9s-filesystem.svg?branch=master)](https://travis-ci.org/simon-s9/s9s-filesystem)\n\n# Filesystem\n\nFile system module\n\n\n\n\n\n## Class: Filesystem\nFile system class\n\n### Filesystem.Filesystem.getStat(path) \n\nReturns stats for file/directory/symbolic link\n\n\n**Parameters**\n\n**path**: `string`, The path to check\n\n\n**Returns**: `boolean | Object | *`\n\n### Filesystem.Filesystem.isFile(path) \n\nChecks if the path is a file\n\n\n**Parameters**\n\n**path**: `string`, The path to check\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.isDirectory(path) \n\nChecks if the path is a directory\n\n\n**Parameters**\n\n**path**: `string`, The path to check\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.fileExists(path) \n\nChecks if files exists\n\n\n**Parameters**\n\n**path**: `string`, The path to check\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.directoryExists(path) \n\nChecks if directory exists\n\n\n**Parameters**\n\n**path**: `string`, The path to check\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.createDirectory(path, mode) \n\nCreate a new directory (recursively)\n\n\n**Parameters**\n\n**path**: `string`, The path to create\n**mode**: , The mode to create a directory with, default 0777 & (~process.umask())\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.deleteDirectory(path) \n\nDeletes a directory\n\n\n**Parameters**\n\n**path**: `string`, The path to the directory to delete\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.rename(oldName, newName) \n\nRenames a file or directory\n\n\n**Parameters**\n\n**oldName**: `string`, Original name\n**newName**: `string`, New name\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.readFile(path, options) \n\nReads file contents\n\n\n**Parameters**\n\n**path**: `string`, Path to file\n**options**: `string`, Default 'utf8'\n\n\n**Returns**: `boolean | string`\n\n### Filesystem.Filesystem.writeFile(path, data, options) \n\nWrite file contents\n\n\n**Parameters**\n\n**path**: `string`, Path to file\n**data**: `string`, Data to write\n**options**: `string`, Default 'utf8'\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.readJson(path) \n\nReads JSON files and returns a parsed json object\n\n\n**Parameters**\n\n**path**: `string`, Path to JSON file\n\n\n**Returns**: `boolean | Object`\n\n### Filesystem.Filesystem.writeJson(path, data) \n\nConverts data object to json string and writes to path\n\n\n**Parameters**\n\n**path**: `string`, Path to json file\n**data**: `Object`, Data to write\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.appendFile(path, data, options) \n\nAppend data to the end of file\n\n\n**Parameters**\n\n**path**: `string`, Path to file\n**data**: `string`, Data to append\n**options**: `object | string`, Write options, default \"utf8\"\n\n\n**Returns**: `boolean`\n\n### Filesystem.Filesystem.prependFile(path, data, options) \n\nPrepend data to the end of file\n\n\n**Parameters**\n\n**path**: `string`, Path to file\n**data**: `string`, Data to prepend\n**options**: `object | string`, Read/Write options, default \"utf8\"\n\n\n**Returns**: `boolean`\n\n\n## License\n\nCopyright (c) 2016 Severalnines AB\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "gitHead": "b21ce42d089832d42d7358718b2be4a8abc15317",
  "bugs": {
    "url": "https://github.com/simon-s9/s9s-filesystem/issues"
  },
  "homepage": "https://github.com/simon-s9/s9s-filesystem",
  "_id": "s9s-filesystem@1.0.5",
  "_shasum": "bdd6c10c0a4d1da1347e3ad87f8226b6eb87d7d7",
  "_from": "s9s-filesystem@>=1.0.5 <2.0.0"
}
